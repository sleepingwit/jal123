XGETTEXT(1)                   GNU                   XGETTEXT(1)





NAME
       xgettext - extract gettext strings from source

SYNOPSIS
       xgettext [OPTION] [INPUTFILE]...

DESCRIPTION
       Extract translatable strings from given input files.

       Mandatory  arguments  to  long options are mandatory for
       short options too.  Similarly for optional arguments.

   Input file location:
       INPUTFILE ...
              input files

       -f, --files-from=FILE
              get list of input files from FILE

       -D, --directory=DIRECTORY
              add DIRECTORY to list for input files search

       If input file is -, standard input is read.

   Output file location:
       -d, --default-domain=NAME
              use NAME.po for output (instead of messages.po)

       -o, --output=FILE
              write output to specified file

       -p, --output-dir=DIR
              output files will be placed in directory DIR

       If output file is -, output is written to standard  out-
       put.

   Choice of input file language:
       -L, --language=NAME
              recognise  the specified language (C, C++, Objec-
              tiveC,  PO,  Shell,  Python,   Lisp,   EmacsLisp,
              librep, Smalltalk, Java, JavaProperties, C#, awk,
              YCP, Tcl, Perl, PHP,  GCC-source,  NXStringTable,
              RST, Glade)

       -C, --c++
              shorthand for --language=C++

       By  default  the  language  is  guessed depending on the
       input file name extension.

   Input file interpretation:
       --from-code=NAME
              encoding of input files (except for Python,  Tcl,
              Glade)

       By default the input files are assumed to be in ASCII.

   Operation mode:
       -j, --join-existing
              join messages with existing file

       -x, --exclude-file=FILE.po
              entries from FILE.po are not extracted

       -c, --add-comments[=TAG]
              place  comment block with TAG (or those preceding
              keyword lines) in output file

   Language specific options:
       -a, --extract-all
              extract  all  strings  (only  languages  C,  C++,
              ObjectiveC,   Shell,   Python,  Lisp,  EmacsLisp,
              librep, Java,  C#,  awk,  Tcl,  Perl,  PHP,  GCC-
              source, Glade)

       -k, --keyword[=WORD]
              additional keyword to be looked for (without WORD
              means not to use default keywords)

              (only  languages  C,  C++,   ObjectiveC,   Shell,
              Python,  Lisp,  EmacsLisp, librep, Java, C#, awk,
              Tcl, Perl, PHP, GCC-source, Glade)

       --flag=WORD:ARG:FLAG
              additional flag for strings inside  the  argument
              number ARG of keyword WORD

              (only   languages   C,  C++,  ObjectiveC,  Shell,
              Python, Lisp, EmacsLisp, librep, Java,  C#,  awk,
              YCP, Tcl, Perl, PHP, GCC-source)

       -T, --trigraphs
              understand  ANSI C trigraphs for input (only lan-
              guages C, C++, ObjectiveC)

       --qt   recognize Qt format strings (only language C++)

       --debug
              more detailed formatstring recognition result

   Output details:
       -e, --no-escape
              do not use C escapes in output (default)

       -E, --escape
              use C escapes in output, no extended chars

       --force-po
              write PO file even if empty

       -i, --indent
              write the .po file using indented style

       --no-location
              do not write '#: filename:line' lines

       -n, --add-location
              generate '#: filename:line' lines (default)

       --strict
              write out strict Uniforum conforming .po file

       --properties-output
              write out a Java .properties file

       --stringtable-output
              write out a NeXTstep/GNUstep .strings file

       -w, --width=NUMBER
              set output page width

       --no-wrap
              do not break long message lines, longer than  the
              output page width, into several lines

       -s, --sort-output
              generate sorted output

       -F, --sort-by-file
              sort output by file location

       --omit-header
              don't write header with `msgid ""' entry

       --copyright-holder=STRING
              set copyright holder in output

       --foreign-user
              omit FSF copyright in output for foreign user

       --msgid-bugs-address=EMAIL@ADDRESS
              set report address for msgid bugs

       -m, --msgstr-prefix[=STRING]
              use STRING or "" as prefix for msgstr entries

       -M, --msgstr-suffix[=STRING]
              use STRING or "" as suffix for msgstr entries

   Informative output:
       -h, --help
              display this help and exit

       -V, --version
              output version information and exit

AUTHOR
       Written by Ulrich Drepper.

REPORTING BUGS
       Report bugs to <bug-gnu-gettext@gnu.org>.

COPYRIGHT
       Copyright (C) 1995-1998, 2000-2004 Free Software Founda-
       tion, Inc.
       This is free software; see the source for copying condi-
       tions.  There is NO warranty; not even for MERCHANTABIL-
       ITY or FITNESS FOR A PARTICULAR PURPOSE.

SEE ALSO
       The full documentation for xgettext is maintained  as  a
       Texinfo  manual.   If the info and xgettext programs are
       properly installed at your site, the command

              info xgettext

       should give you access to the complete manual.



GNU gettext-tools 0.14.1  January 2004              XGETTEXT(1)
